name: Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Build project
        run: npm run build
        
      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
            
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Restore cached build
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}
      
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      
      - name: Backup current deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/skit.sascha-kohler.at
            if [ -d "current" ]; then
              rm -rf backup
              mv current backup
            fi
            mkdir -p current
          
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "dist/*"
          target: "/var/www/skit.sascha-kohler.at/current"
          strip_components: 1
          
      - name: Set permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            sudo chown -R www-data:www-data /var/www/skit.sascha-kohler.at/current
            sudo chmod -R 755 /var/www/skit.sascha-kohler.at/current
          
      - name: Verify deployment
        run: |
          if curl -s --head https://skit.sascha-kohler.at | grep "200 OK" > /dev/null; then 
            echo "Deployment successful!"
          else
            echo "Deployment verification failed"
            exit 1
          fi
          
      - name: Deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { job, conclusion } = context;
            const status = conclusion === 'success' ? '✅' : '❌';
            const message = `Deployment ${conclusion}: ${status}`;
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });

  rollback:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Rollback deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/skit.sascha-kohler.at
            if [ -d "backup" ]; then
              rm -rf current
              mv backup current
              echo 'Rollback completed'
            else
              echo 'No backup found'
              exit 1
            fi